version: '3'

vars:
  REQUIRED_TOOLS_LIST: gum

tasks:

  default:
  - task: :helpers:validate
    vars:
      REQUIRED_TOOLS_LIST: "{{.REQUIRED_TOOLS_LIST}}"

  full:
    silent: true
    preconditions:
    - sh: test -f ./cluster-secrets.yaml
      msg: './cluster-secrets.yaml not found, please update manually'
    - sh: test -f ./cluster-configs.yaml
      msg: './cluster-configs.yaml not found, please update manually'
    desc: Initializes cluster configs, commits locally, pushes remotely & bootstraps FluxCD End to End
    cmds:
    - task: configs
    - task: git-promote
    - task: :flux:bootstrap
    - 'git pull origin --autostash'

  configs:
    silent: true
    desc: Initializes Cluster Configs based on Cluster Profile and Target K8s Cluster
    vars:
      K8S_CLUSTER_NAME:
        sh: 'task bootstrap:gum -- input --header "What is your Kubernetes Cluster Name" --placeholder "nke-nvd-llm-management"'
      K8S_DISTRO:
        sh: 'task bootstrap:gum -- choose --header "What is Kubernetes Distribution?" "nke" "ocp" "rke2" "eksa"'
      CLUSTER_PROFILE:
        sh: 'task bootstrap:gum -- choose --header "Which Cluster Profile would you like to Bootstrap?" "llm-management" "llm-workloads"'
      ENVIRONMENT_TYPE:
        sh: 'task bootstrap:gum -- choose --header "What Type of Environment is this?" "non-prod" "prod" '
      CLUSTER_ADDONS:
        sh: 'task bootstrap:gum -- choose --no-limit --header "Which additional add-ons would you like to enable?" "gpu-operator" "gpu-time-slicing" "nutanix-csi-files" "nutanix-cosi"'
    cmds:

    ## initialize new cluster based on k8s distro
    - task: init-local-configs
      vars:
        K8S_CLUSTER_NAME: "{{.K8S_CLUSTER_NAME}}"
        K8S_DISTRO: "{{.K8S_DISTRO}}"
        CLUSTER_PROFILE: "{{.CLUSTER_PROFILE}}"
        ENVIRONMENT_TYPE: "{{.ENVIRONMENT_TYPE}}"
        CLUSTER_ADDONS: "{{.CLUSTER_ADDONS}}"

    ## print summary of vars
    - task: print-vars
      vars:
        K8S_CLUSTER_NAME: "{{.K8S_CLUSTER_NAME}}"
        K8S_DISTRO: "{{.K8S_DISTRO}}"
        CLUSTER_PROFILE: "{{.CLUSTER_PROFILE}}"
        ENVIRONMENT_TYPE: "{{.ENVIRONMENT_TYPE}}"
        CLUSTER_ADDONS: "{{.CLUSTER_ADDONS}}"

  print-vars:
    silent: true
    cmds:
    - 'echo Target Kubernetes Cluster: $(gum style "{{.K8S_CLUSTER_NAME}}")'
    - 'echo Environment Details: $(gum style "{{.K8S_DISTRO}}:{{.CLUSTER_PROFILE}}:{{.ENVIRONMENT_TYPE}}")'
    - 'echo Additional Feature Addons: '
    - for: {var: CLUSTER_ADDONS}
      cmd: 'echo - $(gum style --foreground=#99000 {{.ITEM}})'

  init-local-configs:
    silent: true
    desc: Runs ./init_local_configs.sh bash script to configure cluster configs and encrypt secrets with sops
    deps: [default]
    cmds:
    - ./init_local_configs.sh {{.K8S_CLUSTER_NAME}} {{.CLUSTER_PROFILE}} {{.ENVIRONMENT_TYPE}} true
    requires:
      vars: [PROJECT_DIR, K8S_CLUSTER_NAME, CLUSTER_PROFILE, ENVIRONMENT_TYPE]
    status:
    - test -f clusters/{{.K8S_CLUSTER_NAME}}/platform/cluster-secrets.yaml
    - test -f clusters/{{.K8S_CLUSTER_NAME}}/platform/cluster-configs.yaml
    - test -f clusters/{{.K8S_CLUSTER_NAME}}/platform/kustomization.yaml

  git-promote:
    silent: false
    deps: [default]
    desc: Adds newly created cluster to git and pushes to remote branch
    precondition:
    - test -f {{.PROJECT_DIR}}/clusters/{{.K8S_CLUSTER_NAME}}/platform/cluster-secrets.yaml
    - test -f {{.PROJECT_DIR}}/clusters/{{.K8S_CLUSTER_NAME}}/platform/cluster-configs.yaml
    - test -f {{.PROJECT_DIR}}/clusters/{{.K8S_CLUSTER_NAME}}/platform/kustomization.yaml
    prompt: "This will commit the code locally, push remotely and bootstrap the following cluster: {{.K8S_CLUSTER_NAME}}. Do you wish to continue?"
    cmds:
    - 'git add clusters/{{.K8S_CLUSTER_NAME}}'
    - 'git commit -am "add: cluster-configs for new cluster {{.K8S_CLUSTER_NAME}}"'
    - 'git pull origin --autostash'
    - 'export GITHUB_TOKEN={{.GITHUB_TOKEN}} && git push origin'
    requires:
      vars: [K8S_CLUSTER_NAME, GITHUB_BRANCH]

  ## needed to make sure environment variables are passed into shell cli in dynamic variables
  gum:
    cmds:
    - gum {{.CLI_ARGS}}
    silent: true
